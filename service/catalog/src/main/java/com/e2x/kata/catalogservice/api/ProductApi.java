/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.catalogservice.api;

import com.e2x.kata.catalogservice.model.Product;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "product", description = "the product API")
public interface ProductApi {

    default ProductApiDelegate getDelegate() {
        return new ProductApiDelegate() {};
    }

    /**
     * GET /product/{productKey} : Find product by Key
     * Returns a single product
     *
     * @param productKey Key of product to return (required)
     * @return successful operation (status code 200)
     *         or Invalid Key supplied (status code 400)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "getProductByKey",
        summary = "Find product by Key",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Key supplied"),
            @ApiResponse(responseCode = "404", description = "Product not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productKey}",
        produces = { "application/json" }
    )
    default ResponseEntity<Product> getProductByKey(
        @Parameter(name = "productKey", description = "Key of product to return", required = true) @PathVariable("productKey") String productKey
    ) {
        Counter getProductByKeyCounter = Metrics.counter("ProductApi.getProductByKey");
        getProductByKeyCounter.increment();
        return getDelegate().getProductByKey(productKey);
    }

}
