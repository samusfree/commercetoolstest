/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.catalogservice.api;

import com.e2x.kata.catalogservice.model.Category;
import com.e2x.kata.catalogservice.model.CategoryList;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "category", description = "the category API")
public interface CategoryApi {

    default CategoryApiDelegate getDelegate() {
        return new CategoryApiDelegate() {};
    }

    /**
     * GET /category/{seoSlug} : Find category by looking up the SEO Slug
     * Returns a single category
     *
     * @param seoSlug seoSlug of category to return (required)
     * @return successful operation (status code 200)
     *         or Invalid seoSlug supplied (status code 400)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "getCategoryBySlug",
        summary = "Find category by looking up the SEO Slug",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid seoSlug supplied"),
            @ApiResponse(responseCode = "404", description = "Category not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category/{seoSlug}",
        produces = { "application/json" }
    )
    default ResponseEntity<Category> getCategoryBySlug(
        @Parameter(name = "seoSlug", description = "seoSlug of category to return", required = true) @PathVariable("seoSlug") String seoSlug
    ) {
        Counter getCategoryBySlugCounter = Metrics.counter("CategoryApi.getCategoryBySlug");
        getCategoryBySlugCounter.increment();
        return getDelegate().getCategoryBySlug(seoSlug);
    }


    /**
     * GET /category : Find the root categories
     * Returns the root categories
     *
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "getRootCategories",
        summary = "Find the root categories",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Category not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category",
        produces = { "application/json" }
    )
    default ResponseEntity<CategoryList> getRootCategories(
        
    ) {
        Counter getRootCategoriesCounter = Metrics.counter("CategoryApi.getRootCategories");
        getRootCategoriesCounter.increment();
        return getDelegate().getRootCategories();
    }

}
