/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.catalogservice.api;

import com.e2x.kata.catalogservice.model.Catalog;
import com.e2x.kata.catalogservice.model.CatalogList;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "catalog", description = "the catalog API")
public interface CatalogApi {

    default CatalogApiDelegate getDelegate() {
        return new CatalogApiDelegate() {};
    }

    /**
     * GET /catalog/{catalogId} : Find catalog by ID
     * Returns a single catalog
     *
     * @param catalogId ID of catalog to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Catalog not found (status code 404)
     */
    @Operation(
        operationId = "getCatalogById",
        summary = "Find catalog by ID",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Catalog.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Catalog not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalog/{catalogId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Catalog> getCatalogById(
        @Parameter(name = "catalogId", description = "ID of catalog to return", required = true) @PathVariable("catalogId") String catalogId
    ) {
        Counter getCatalogByIdCounter = Metrics.counter("CatalogApi.getCatalogById");
        getCatalogByIdCounter.increment();
        return getDelegate().getCatalogById(catalogId);
    }


    /**
     * GET /catalog : Retrieve all catalogs
     * Returns all the catalogs
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCatalogs",
        summary = "Retrieve all catalogs",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalog",
        produces = { "application/json" }
    )
    default ResponseEntity<CatalogList> getCatalogs(
        
    ) {
        Counter getCatalogsCounter = Metrics.counter("CatalogApi.getCatalogs");
        getCatalogsCounter.increment();
        return getDelegate().getCatalogs();
    }

}
