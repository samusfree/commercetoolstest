/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.basketservice.api;

import com.e2x.kata.basketservice.model.Address;
import com.e2x.kata.basketservice.model.Basket;
import com.e2x.kata.basketservice.model.CommerceItemId;
import com.e2x.kata.basketservice.model.CustomerEmail;
import com.e2x.kata.basketservice.model.Product;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "basket", description = "the basket API")
public interface BasketApi {

    default BasketApiDelegate getDelegate() {
        return new BasketApiDelegate() {};
    }

    /**
     * POST /basket/{customerId}/add : Add item to basket
     * Adds a single item to the basket.
     *
     * @param customerId Owner of the basket to add an item to (required)
     * @param product The commerceitem being added (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "addToBasketByCustomerId",
        summary = "Add item to basket",
        tags = { "basket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Basket.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/basket/{customerId}/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Basket> addToBasketByCustomerId(
        @Parameter(name = "customerId", description = "Owner of the basket to add an item to", required = true) @PathVariable("customerId") String customerId,
        @Parameter(name = "Product", description = "The commerceitem being added", required = true) @Valid @RequestBody Product product
    ) {
        Counter addToBasketByCustomerIdCounter = Metrics.counter("BasketApi.addToBasketByCustomerId");
        addToBasketByCustomerIdCounter.increment();
        return getDelegate().addToBasketByCustomerId(customerId, product);
    }


    /**
     * GET /basket/{customerId} : Retrieve the current basket for the specified customer
     * Retrieves the referenced basket for the current user.
     *
     * @param customerId ID of customer for whose basket to return (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getBasketByCustomerId",
        summary = "Retrieve the current basket for the specified customer",
        tags = { "basket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Basket.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/basket/{customerId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Basket> getBasketByCustomerId(
        @Parameter(name = "customerId", description = "ID of customer for whose basket to return", required = true) @PathVariable("customerId") String customerId
    ) {
        Counter getBasketByCustomerIdCounter = Metrics.counter("BasketApi.getBasketByCustomerId");
        getBasketByCustomerIdCounter.increment();
        return getDelegate().getBasketByCustomerId(customerId);
    }


    /**
     * POST /basket/{customerId}/remove : Remove item from basket
     * Removes a single item from the basket.
     *
     * @param customerId Owner of the basket to add an item to (required)
     * @param commerceItemId The identifier of the commerceitem being remove (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "removeFromBasketByCustomerId",
        summary = "Remove item from basket",
        tags = { "basket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Basket.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/basket/{customerId}/remove",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Basket> removeFromBasketByCustomerId(
        @Parameter(name = "customerId", description = "Owner of the basket to add an item to", required = true) @PathVariable("customerId") String customerId,
        @Parameter(name = "CommerceItemId", description = "The identifier of the commerceitem being remove", required = true) @Valid @RequestBody CommerceItemId commerceItemId
    ) {
        Counter removeFromBasketByCustomerIdCounter = Metrics.counter("BasketApi.removeFromBasketByCustomerId");
        removeFromBasketByCustomerIdCounter.increment();
        return getDelegate().removeFromBasketByCustomerId(customerId, commerceItemId);
    }


    /**
     * POST /basket/{customerId}/billing-address : Set billing address on basket
     * Sets the billing address on the basket.
     *
     * @param customerId Owner of the basket (required)
     * @param address The billing address being added (required)
     * @return Success (status code 200)
     *         or Billing address not valid (status code 400)
     *         or Basket does not exist (status code 404)
     */
    @Operation(
        operationId = "setBillingAddressByCustomerId",
        summary = "Set billing address on basket",
        tags = { "basket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Basket.class))
            }),
            @ApiResponse(responseCode = "400", description = "Billing address not valid"),
            @ApiResponse(responseCode = "404", description = "Basket does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/basket/{customerId}/billing-address",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Basket> setBillingAddressByCustomerId(
        @Parameter(name = "customerId", description = "Owner of the basket", required = true) @PathVariable("customerId") String customerId,
        @Parameter(name = "Address", description = "The billing address being added", required = true) @Valid @RequestBody Address address
    ) {
        Counter setBillingAddressByCustomerIdCounter = Metrics.counter("BasketApi.setBillingAddressByCustomerId");
        setBillingAddressByCustomerIdCounter.increment();
        return getDelegate().setBillingAddressByCustomerId(customerId, address);
    }


    /**
     * POST /basket/{customerId}/email : Set email address on basket
     * Sets the email address on the basket.
     *
     * @param customerId Owner of the basket (required)
     * @param customerEmail The email address being added (required)
     * @return Success (status code 200)
     *         or Email address not valid (status code 400)
     *         or Basket does not exist (status code 404)
     */
    @Operation(
        operationId = "setEmailAddressByCustomerId",
        summary = "Set email address on basket",
        tags = { "basket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Basket.class))
            }),
            @ApiResponse(responseCode = "400", description = "Email address not valid"),
            @ApiResponse(responseCode = "404", description = "Basket does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/basket/{customerId}/email",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Basket> setEmailAddressByCustomerId(
        @Parameter(name = "customerId", description = "Owner of the basket", required = true) @PathVariable("customerId") String customerId,
        @Parameter(name = "CustomerEmail", description = "The email address being added", required = true) @Valid @RequestBody CustomerEmail customerEmail
    ) {
        Counter setEmailAddressByCustomerIdCounter = Metrics.counter("BasketApi.setEmailAddressByCustomerId");
        setEmailAddressByCustomerIdCounter.increment();
        return getDelegate().setEmailAddressByCustomerId(customerId, customerEmail);
    }


    /**
     * POST /basket/{customerId}/shipping-address : Set shipping address on basket
     * Sets the shipping address on the basket.
     *
     * @param customerId Owner of the basket (required)
     * @param address The shipping address being added (required)
     * @return Success (status code 200)
     *         or Shipping address not valid (status code 400)
     *         or Basket does not exist (status code 404)
     */
    @Operation(
        operationId = "setShippingAddressByCustomerId",
        summary = "Set shipping address on basket",
        tags = { "basket" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Basket.class))
            }),
            @ApiResponse(responseCode = "400", description = "Shipping address not valid"),
            @ApiResponse(responseCode = "404", description = "Basket does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/basket/{customerId}/shipping-address",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Basket> setShippingAddressByCustomerId(
        @Parameter(name = "customerId", description = "Owner of the basket", required = true) @PathVariable("customerId") String customerId,
        @Parameter(name = "Address", description = "The shipping address being added", required = true) @Valid @RequestBody Address address
    ) {
        Counter setShippingAddressByCustomerIdCounter = Metrics.counter("BasketApi.setShippingAddressByCustomerId");
        setShippingAddressByCustomerIdCounter.increment();
        return getDelegate().setShippingAddressByCustomerId(customerId, address);
    }

}
