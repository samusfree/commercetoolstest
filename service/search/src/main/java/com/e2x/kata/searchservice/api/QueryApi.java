/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.searchservice.api;

import com.e2x.kata.searchservice.model.QueryParams;
import com.e2x.kata.searchservice.model.SearchResult;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "query", description = "the query API")
public interface QueryApi {

    default QueryApiDelegate getDelegate() {
        return new QueryApiDelegate() {};
    }

    /**
     * POST /query : Search for products
     * Returns search results
     *
     * @param queryParams Search query parameters (required)
     * @return successful operation (status code 200)
     *         or Invalid search parameters (status code 400)
     */
    @Operation(
        operationId = "searchByParams",
        summary = "Search for products",
        tags = { "search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid search parameters")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/query",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SearchResult> searchByParams(
        @Parameter(name = "QueryParams", description = "Search query parameters", required = true) @Valid @RequestBody QueryParams queryParams
    ) {
        Counter searchByParamsCounter = Metrics.counter("QueryApi.searchByParams");
        searchByParamsCounter.increment();
        return getDelegate().searchByParams(queryParams);
    }

}
