/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.searchservice.api;

import com.e2x.kata.searchservice.model.FilterDefinitions;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "filters", description = "the filters API")
public interface FiltersApi {

    default FiltersApiDelegate getDelegate() {
        return new FiltersApiDelegate() {};
    }

    /**
     * GET /filters/{language} : Retrieve filters for search
     * Retrieve filters for search
     *
     * @param language Language of filter definitions to retrieve (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "retrieveFilters",
        summary = "Retrieve filters for search",
        tags = { "search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterDefinitions.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/filters/{language}",
        produces = { "application/json" }
    )
    default ResponseEntity<FilterDefinitions> retrieveFilters(
        @Parameter(name = "language", description = "Language of filter definitions to retrieve", required = true) @PathVariable("language") String language
    ) {
        Counter retrieveFiltersCounter = Metrics.counter("FiltersApi.retrieveFilters");
        retrieveFiltersCounter.increment();
        return getDelegate().retrieveFilters(language);
    }

}
