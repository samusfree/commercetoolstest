/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.e2x.kata.customerservice.api;

import com.e2x.kata.customerservice.model.Customer;
import com.e2x.kata.customerservice.model.LoginDetails;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.annotations.Api;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;


@Validated
@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    default CustomerApiDelegate getDelegate() {
        return new CustomerApiDelegate() {};
    }

    /**
     * DELETE /customer/{customerId} : Deletes a customer by their customer ID
     * Deletes a customer by their customer ID
     *
     * @param customerId  (required)
     * @return Success (status code 200)
     *         or User does not exist (status code 404)
     */
    @Operation(
        operationId = "deleteByCustomerId",
        summary = "Deletes a customer by their customer ID",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "User does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customer/{customerId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Customer> deleteByCustomerId(
        @Parameter(name = "customerId", description = "", required = true) @PathVariable("customerId") String customerId
    ) {
        Counter deleteByCustomerIdCounter = Metrics.counter("CustomerApi.deleteByCustomerId");
        deleteByCustomerIdCounter.increment();
        return getDelegate().deleteByCustomerId(customerId);
    }


    /**
     * GET /customer : Gets a customer by email address
     * Get a customer by email address
     *
     * @param emailAddress  (required)
     * @return Success (status code 200)
     *         or User does not exist (status code 404)
     */
    @Operation(
        operationId = "getCustomerByEmail",
        summary = "Gets a customer by email address",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "User does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customer",
        produces = { "application/json" }
    )
    default ResponseEntity<Customer> getCustomerByEmail(
        @NotNull @Parameter(name = "email_address", description = "", required = true) @Valid @RequestParam(value = "email_address", required = true) String emailAddress
    ) {
        Counter getCustomerByEmailCounter = Metrics.counter("CustomerApi.getCustomerByEmail");
        getCustomerByEmailCounter.increment();
        return getDelegate().getCustomerByEmail(emailAddress);
    }


    /**
     * POST /customer/login : Logs the customer into the system
     * Logs a customer in using their username, an email, and their password.
     *
     * @param loginDetails Optional description in *Markdown* (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "loginCustomer",
        summary = "Logs the customer into the system",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customer/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Customer> loginCustomer(
        @Parameter(name = "LoginDetails", description = "Optional description in *Markdown*", required = true) @Valid @RequestBody LoginDetails loginDetails
    ) {
        Counter loginCustomerCounter = Metrics.counter("CustomerApi.loginCustomer");
        loginCustomerCounter.increment();
        return getDelegate().loginCustomer(loginDetails);
    }


    /**
     * POST /customer : Registers a new customer into the system
     * Registers a new customer with the system.
     *
     * @param customer The Customer being registered (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "register",
        summary = "Registers a new customer into the system",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Customer> register(
        @Parameter(name = "Customer", description = "The Customer being registered", required = true) @Valid @RequestBody Customer customer
    ) {
        Counter registerCounter = Metrics.counter("CustomerApi.register");
        registerCounter.increment();
        return getDelegate().register(customer);
    }

}
